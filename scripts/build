#!/usr/bin/env bash

# This script builds a Docker image.
#
# It can take an optional argument for the Docker build context path.
# Usage: ./build [DOCKER_CONTEXT_PATH]
#
# If DOCKER_CONTEXT_PATH is not provided, the script's directory will be used as the context.
#
# Expected Docker context layout:
#   .dockerfiles/ruby/2.3.6/ (example DOCKER_CONTEXT_PATH)
#   |── .env (should contain IMAGE_NAME and IMAGE_TAGS)
#   └── Dockerfile

set -e

SCRIPT_PATH="${BASH_SOURCE[*]}"
while [ -L "$SCRIPT_PATH" ]; do
  SCRIPT_DIR="$(cd -P "$(dirname "$SCRIPT_PATH")" >/dev/null 2>&1 && pwd)"
  SCRIPT_PATH="$(readlink "$SCRIPT_PATH")"
  [[ $SCRIPT_PATH != /* ]] && SCRIPT_PATH="$SCRIPT_DIR/$SCRIPT_PATH"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SCRIPT_PATH")" >/dev/null 2>&1 && pwd)"

DOCKER_CONTEXT="${1:-$SCRIPT_DIR}"
if [[ ! "$DOCKER_CONTEXT" = /* ]]; then
  DOCKER_CONTEXT="$(pwd)/$DOCKER_CONTEXT"
fi
DOCKER_CONTEXT="$(cd -P "$DOCKER_CONTEXT" >/dev/null 2>&1 && pwd)"

echo "Building Docker image with context: ${DOCKER_CONTEXT:-$SCRIPT_DIR}"

# Source the .env file to load environment variables
if [ -f "${DOCKER_CONTEXT:-$SCRIPT_DIR}/.env" ]; then
  set -a # automatically export all variables
  . "${DOCKER_CONTEXT:-$SCRIPT_DIR}/.env"
  set +a
fi

DOCKER_BUILD_ARGS=$(cat "${DOCKER_CONTEXT:-$SCRIPT_DIR}/.env" | grep -vE '^(IMAGE_NAME|IMAGE_TAGS)=' | sed 's/^/--build-arg /')

BASE_NAME="${IMAGE_NAME}"
DOCKER_TAGS=""
for TAG_LINE in "${IMAGE_TAGS[@]}"; do
  DOCKER_TAGS+=" -t ${BASE_NAME}:${TAG_LINE}"
done

docker build \
  ${DOCKER_BUILD_ARGS} \
  ${DOCKER_TAGS} \
  "${DOCKER_CONTEXT:-$SCRIPT_DIR}"

# After building, get the IMAGE_ID and write it to the 'id' file
"${SCRIPT_DIR}/get_image_id" "${DOCKER_CONTEXT:-$SCRIPT_DIR}"
